[project]
# https://docs.astral.sh/ruff/settings/#target-version
requires-python = ">=3.11.9"

[tool.poetry]
name = "lstm_autoencoder"
version = "0.1.0"
description = ""
authors = ["Marlon Ziegler"]
readme = "README.md"

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "poetry"
version_files = ["src/lstm_autoencoder/__init__.py", "pyproject.toml:version"]

[tool.poetry.dependencies]
# Python Interpreter Version
python = "~3.11.9"

# Plotting
seaborn = ">=0.11.2"
# Orchestration
hydra-core = ">=1.3.2"
lightning = "^2.4.0"
matplotlib = "^3.9.2"
scikit-learn = "^1.5.2"
pandas = "^2.2.3"
numpy = "^2.1.1"
holidays = "^0.57"
plotnine = "^0.13.6"

[tool.poetry.group.dev.dependencies]
# Developement Dependencies
ipykernel = ">=6.9.2"
jupyterlab = ">=3.3.4"

[tool.poetry.group.test.dependencies]
# Testing Dependencies
pytest = ">=7.1.0"
pytest-cov = ">=4.0"

[tool.poetry.group.lint.dependencies]
# Linting Dependencies
pre-commit = ">=2.18.0"
commitizen = ">=2.39.1"
ruff = ">=0.6.0"
mypy = ">=0.991"

[tool.poetry.scripts]
"lstm_autoencoder" = "lstm_autoencoder.main:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflake
    "I",     # isort
    "D",     # pydocstyle
    "C901",  # complexity
    "N",     # pep8 naming convention
    "UP",    # pyupgrade
    "NPY",   # NumPy-specific rules
    "ASYNC", # flake8-async
    "S105",  # flake8-bandit: hardcoded-password-string
    "S106",  # flake8-bandit: hardcoded-password-func-arg
    "S107",  # flake8-bandit: hardcoded-password-default
    "C4",    # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
]

ignore = [
    "D100", # ignore missing docstring on module level
    "D104", # ignore missing docstring on package level
    "D206", # indent with spaces, may get conflicts with ruff formatter
    "D417", # On top of the Google convention, disable `D417`, which requires documentation for every function parameter.
    "E501", # line too long, handled by ruff formatter if possible
    "RET504", # unnecessary-assign to maintain debuggability
    "RET505", # unnecessary-branch no autofix
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # ignore unused imports in __init__ file
"tests/*" = ["D103"] # ignore missing docstring in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.mypy]
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
disallow_any_generics = false
check_untyped_defs = true
warn_unused_ignores = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
show_column_numbers = true
show_error_codes = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = """
--cov-report html \
--cov src/lstm_autoencoder -ra"""

[tool.coverage.paths]
source = ["src/lstm_autoencoder"]

[tool.coverage.run]
branch = true
source = ["src/lstm_autoencoder"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",
    "raise AssertionError",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod"
]
